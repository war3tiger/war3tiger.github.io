---
layout: post
title:  "深入理解计算机系统总结（一）"
date:   2019-07-03 18:39:00 +0800
categories: jekyll update
---
## 目录
[1. 寄存器](#catalog-1)

[2. 操作数指示符](#catalog-2)

[3. 数据传送指令MOV家族](#catalog-3)
## <a name="catalog-1"></a>寄存器
x86-64位CPU的16个64位通用目的寄存器。如图：
![](../resources/csapp/1.png)
__备注__：有很多汇编指令会复制和生成1字节、2字节、4字节和8字节值。当这些指令以寄存器为目标时对于生成小于8字节结果的指令会有两条处理规则：

```
1. 生成1字节、2字节的指令会保持剩下的字节不变；
2. 生成4字节的指令会把高位4字节置为0.
```

在这些16个通用寄存器中__%rsp__是栈指针，用来说明运行时栈的结束位置。

## <a name="catalog-2"></a>操作数指示符
![](../resources/csapp/2.png)

## <a name="catalog-3"></a>数据传送指令MOV家族
<table><tr><td bgcolor=orange>限制：传送指令的两个操作数不能都指向内存位置，如果有该操作需要将源值加载到寄存器，再将寄存器值写入目的位置。</td></tr></table>

### 简单指令：![](../resources/csapp/3.png)
__说明：__

1. 寄存器部分的大小必须与指令最后一个字符(b、w、l或q)指定的大小匹配，内存没有此限制。例如：`movb $-17,(%rsp)//内存、movb $-17,%al//寄存器`。
2. 大多数MOV指令只会更新目的操作数指定的字节大小，唯一例外是movl指令以寄存器为目的时，会把寄存器的高位4自己设置为0。
3. `movabsq`只能以寄存器作为目的。

### 数据移动指令：![](../resources/csapp/4.png)
这两类指令都是将较小的源值复制到较大的目的时使用。

__说明：__

1. 源数据可以是内存或者寄存器，目的数据必须是寄存器。